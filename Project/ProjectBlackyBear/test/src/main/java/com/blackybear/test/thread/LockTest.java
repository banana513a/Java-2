package com.blackybear.test.thread;

/**
 * Description:
 * Author: Dell_Blacky8
 * CopyRight: Dell_Blacky8
 * Create Date: 2017-08-01
 *
 *
 * 锁优化
 * 1. 锁性能优化
 * 		性能优化是需要根据运行时的真实情况对资源点进行权衡折中的过程
 * 		（1）减少锁持有时间，降低锁冲突可能性
 * 		（2）减小锁粒度，缩小锁定对象的范围，减少锁冲突的可能性（分割数据结构）
 * 		（3）锁分离，读写分离锁替换独占锁，适用于读多写少场景（分割系统功能）
 * 		（4）锁粗化，将多个锁操作合成对锁的一次请求，减少锁请求的同步次数
 * 				 锁粗化和减少锁持有时间是相反的，在不同情况下，效果并不相同
 * 2. Java虚拟机锁优化策略
 * 		（1）锁偏向：一个线程获得过锁，那么线程再次请求锁时，无须同步操作（锁竞争不激烈情况）
 * 								启用偏向锁：-XX:+UseBiasedLocking
 * 		（2）轻量级锁：偏向锁失败时，只将锁对象头部作为指针，指向持有锁线程堆栈内部，判断线程是否持有对象锁
 * 		（3）自旋锁：轻量级锁获取失败，虚拟机会让当前线程做空循环，以等待锁，如果空循环后仍无法获得锁，则真正将线程挂起
 * 		（4）锁消除：在不会发生并发的情况，使用锁同步，虚拟机会将无用的锁操作去除
 * 							   锁消除策略基于逃逸分析，即观察某变量时候会逃出作用域
 逃逸分析必须在虚拟机的-server模式下进行，启用参数：-XX:+DoEscapeAnalysis；消除参数：-XX:+EliminateLocks
 *3. ThreadLocal
 *
 */
public class LockTest {
    public static void main(String[] args) {

    }
}

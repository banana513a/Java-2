<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    	http://www.springframework.org/schema/context
    	http://www.springframework.org/schema/context/spring-context-4.3.xsd
    	http://www.springframework.org/schema/aop
    	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    	http://www.springframework.org/schema/tx
    	http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
    	http://www.springframework.org/schema/task
    	http://www.springframework.org/schema/task/spring-task-4.3.xsd">

    <!-- *************************** 加载资源 && 配置文件 *************************** -->
    <context:property-placeholder location="
                        classpath:**/config.properties,
                        classpath:**/db.properties,
                        classpath:**/druid.properties,
                        classpath:**/redis.properties"/>

    <!-- *************************** 加载 Service && Advice ************************** -->
    <context:component-scan base-package="com.blackybear.web">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
    </context:component-scan>


    <!-- *************************** AOP 配置  ***************************-->
    <aop:aspectj-autoproxy proxy-target-class="true" />


    <!-- *************************** Database 配置  *************************** -->
    <!-- LobHandler配置 -->
    <bean id = "mLobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true" />

    <!--region Mybatis 配置整合-->
    <!--Druid 数据源配置-->
    <bean id="dataSource_druid" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${db.driverClassName}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <property name="url" value="${db.url}"/>

        <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <!-- 最小连接池数量 -->
        <property name="minIdle" value="${druid.minIdle}" />
        <!-- 最大连接池数量 -->
        <property name="maxActive" value="${druid.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <property name="testOnReturn" value="${druid.testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}" />
    </bean>

    <!--Mybatis sqlSessionFactory 配置-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource_druid"/>
        <property name="typeAliasesPackage" value="com.blackybear.web.common.entity"/>
        <property name="configLocation"  value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:com/blackybear/web/common/mapper/*.xml"/>
    </bean>

    <!-- Mybatis DAO 接口类扫描 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.blackybear.web.common.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--  ***************************加载事务 && 配置事务的传播特性 *************************** -->
    <!-- Mybatis transaction manager 配置-->
    <bean id="mybatisTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource_druid" />
    </bean>

    <tx:annotation-driven transaction-manager="mybatisTransactionManager"/>
    <!--endregion-->

    <!--region Hibernate 配置整合-->
    <!--&lt;!&ndash; C3P0 数据源配置 &ndash;&gt;-->
    <!--<bean id="dataSource_c3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">-->
        <!--<property name="driverClass" value = "${db.driverClassName}"/>-->
        <!--<property name="jdbcUrl" value = "${db.url}"/>-->
        <!--<property name="user" value = "${db.username}"/>-->
        <!--<property name="password" value = "${db.password}"/>-->
        <!--&lt;!&ndash;连接池中保留的最小连接数。&ndash;&gt;-->
        <!--<property name="minPoolSize" value="${c3p0.minPoolSize}"/>-->
        <!--&lt;!&ndash;连接池中保留的最大连接数。Default: 15 &ndash;&gt;-->
        <!--<property name="maxPoolSize" value="${c3p0.maxPoolSize}"/>-->
        <!--&lt;!&ndash;初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 &ndash;&gt;-->
        <!--<property name="initialPoolSize" value="${c3p0.initialPoolSize}"/>-->
        <!--&lt;!&ndash;最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 &ndash;&gt;-->
        <!--<property name="maxIdleTime" value="${c3p0.maxIdleTime}"/>-->
        <!--&lt;!&ndash;当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 &ndash;&gt;-->
        <!--<property name="acquireIncrement" value="${c3p0.acquireIncrement}"/>-->
        <!--&lt;!&ndash;JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements-->
         <!--属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。-->
         <!--如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0&ndash;&gt;-->
        <!--<property name="maxStatements" value="${c3p0.maxStatements}"/>-->
        <!--&lt;!&ndash;每60秒检查所有连接池中的空闲连接。Default: 0 &ndash;&gt;-->
        <!--<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}"/>-->
        <!--&lt;!&ndash;定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 &ndash;&gt;-->
        <!--<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"/>-->
        <!--&lt;!&ndash;获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: false&ndash;&gt;-->
        <!--<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}"/>-->
        <!--&lt;!&ndash;因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: false &ndash;&gt;-->
        <!--<property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; Hibernate session factory配置&ndash;&gt;-->
    <!--<bean id = "sessionFactory" class ="org.springframework.orm.hibernate5.LocalSessionFactoryBean" >-->
        <!--<property name="dataSource"  ref = "dataSource_c3p0"/>-->
        <!--<property name="hibernateProperties" >-->
            <!--<props>-->
                <!--<prop key="hibernate.show_sql">true</prop>-->
                <!--<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>-->
                <!--<prop key="hibernate.format_sql">true</prop>-->
                <!--<prop key="hibernate.generate_statistics">true</prop>-->
                <!--<prop key="hibernate.connection.release_mode">auto</prop>-->
                <!--<prop key="hibernate.autoReconnect">true</prop>-->
                <!--<prop key="hibernate.session.events.log">false</prop>-->
            <!--</props>-->
        <!--</property>-->
        <!--&lt;!&ndash; 扫描所有model类 &ndash;&gt;-->
        <!--<property name="packagesToScan" >-->
            <!--<list>-->

            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->
    <!--&lt;!&ndash; hibernateTemplate类 &ndash;&gt;-->
    <!--<bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">-->
        <!--<property name="sessionFactory" ref="sessionFactory"></property>-->
    <!--</bean>-->

    <!--&lt;!&ndash;  ***************************加载事务 && 配置事务的传播特性 *************************** &ndash;&gt;-->
    <!--&lt;!&ndash; Hibernate transaction manager 配置 &ndash;&gt;-->
    <!--<bean id = "mHibernateTransactionManager" class = "org.springframework.orm.hibernate5.HibernateTransactionManager" >-->
        <!--<property name="sessionFactory" ref = "sessionFactory" />-->
    <!--</bean>-->
    <!--<tx:annotation-driven transaction-manager="mHibernateTransactionManager"/>-->
    <!--endregion-->

    <!-- *************************** Redis 配置 ***************************-->
    <context:component-scan base-package="com.blackybear.web.common.redis"/>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
        <property name="testOnReturn" value="${redis.testOnReturn}"/>
    </bean>

    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <constructor-arg name="host" value="${redis.host}"/>
        <constructor-arg name="port" value="${redis.port}"/>
        <constructor-arg name="password" value="${redis.auth}"/>
        <constructor-arg name="timeout" value="${redis.timeout}"/>
    </bean>

    <bean id="sharedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <constructor-arg name="shards">
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg name="host" value="${redis.host}"/>
                    <constructor-arg name="port" value="${redis.port}"/>
                    <constructor-arg name="timeout" value="${redis.timeout}"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <!--spring-data-redis 封装-->
    <!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">-->
        <!--<property name="poolConfig" ref="jedisPoolConfig" />-->
        <!--<property name="hostName" value="${redis.host}" />-->
        <!--<property name="port" value="${redis.port}" />-->
        <!--<property name="password" value="${redis.auth}" />-->
        <!--<property name="timeout" value="${redis.timeout}" />-->
    <!--</bean>-->
    <!--<bean id="jedisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >-->
        <!--<property name="connectionFactory" ref="jedisConnectionFactory" />-->
        <!--<property name="keySerializer" >-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--</property>-->
        <!--<property name="valueSerializer" >-->
            <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />-->
        <!--</property>-->
    <!--</bean>-->

    <!-- *************************** 异常捕获 ***************************-->
    <bean class="com.blackybear.web.common.exception.ExceptionHandler"/>

    <!-- *************************** 任务调度 ***************************-->
    <context:component-scan base-package="com.blackybear.web.common.task"/>
    <task:annotation-driven executor="taskExecutor" scheduler="taskScheduler"/>
    <task:executor id="taskExecutor" pool-size="5"/>
    <task:scheduler id="taskScheduler" pool-size="10"/>

    <!-- *************************** Dozer配置 ***************************-->
    <bean id="mapper" class="org.dozer.spring.DozerBeanMapperFactoryBean">
        <property name="mappingFiles">
            <list>
                <value>classpath:dozerBeanMapping.xml</value>
            </list>
        </property>
    </bean>

    <!-- *************************** EhCache 配置  *************************** -->
    <!--<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">-->
        <!--<property name="configLocation" value="WEB-INF/classes/resources/ehcache.xml"/>-->
        <!--<property name="shared" value="false"/>-->
    <!--</bean>-->
    <!--<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">-->
        <!--<property name="cacheManager"  ref="ehCacheManager"/>-->
    <!--</bean>-->
</beans>